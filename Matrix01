class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int rows = mat.length;
    int cols = mat[0].length;
    int[][] distances = new int[rows][cols];
    Queue<int[]> queue = new LinkedList<>();

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (mat[i][j] == 0) {
                distances[i][j] = 0;
                queue.add(new int[]{i, j});
            } else {
                distances[i][j] = Integer.MAX_VALUE;
            }
        }
    }

    int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    while (!queue.isEmpty()) {
        int[] cell = queue.poll();
        int x = cell[0], y = cell[1];

        for (int[] dir : directions) {
            int newX = x + dir[0];
            int newY = y + dir[1];
            if (newX >= 0 && newX < rows && newY >= 0 && newY < cols) {
                if (distances[newX][newY] > distances[x][y] + 1) {
                    distances[newX][newY] = distances[x][y] + 1;
                    queue.add(new int[]{newX, newY});
                }
            }
        }
    }
    return distances;
    }
}
